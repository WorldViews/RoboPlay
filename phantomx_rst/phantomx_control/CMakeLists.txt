cmake_minimum_required(VERSION 2.8.3)
project(phantomx_control)


# Set to Release in order to speed up the program significantly
set(CMAKE_BUILD_TYPE RelWithDebInfo) #None, Debug, Release, RelWithDebInfo, MinSizeRel

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED
roscpp
phantomx_lib
arbotix_msgs
actionlib
control_msgs
tf
tf_conversions
trajectory_msgs
sensor_msgs
cmake_modules
moveit_core
moveit_ros_perception
moveit_ros_planning_interface
pluginlib
)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)
find_package(Eigen REQUIRED)

find_package(OpenCV)



## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

## Enable C++11 support
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
elseif(COMPILER_SUPPORTS_CXX0X)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
else()
        message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependencies might have been
##     pulled in transitively but can be declared for certainty nonetheless:
##     * add a build_depend tag for "message_generation"
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
# generate_messages(
#   DEPENDENCIES
#   std_msgs  # Or other packages containing msgs
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
  INCLUDE_DIRS include
  #LIBRARIES phantomx_lib
  CATKIN_DEPENDS
        arbotix_msgs
  	actionlib 
        phantomx_lib
	control_msgs
	tf
	tf_conversions
	trajectory_msgs
	sensor_msgs
	cmake_modules
	moveit_core
	moveit_ros_perception
	moveit_ros_planning_interface
	pluginlib
  DEPENDS system_lib Eigen3 opencv2
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
  include
  ${catkin_INCLUDE_DIRS}
  ${Eigen_INCLUDE_DIRS}
  ${OpenCV_INCLUDE_DIRS}
)


## Declare a cpp executable
add_executable(moveit_control src/main_moveit.cpp)
target_link_libraries(moveit_control ${catkin_LIBRARIES} ${OpenCV_LIBRARIES})

add_executable(simple_control src/main_simple.cpp)
target_link_libraries(simple_control ${catkin_LIBRARIES} ${OpenCV_LIBRARIES})

add_executable(measure_states src/measure_states.cpp)
target_link_libraries(measure_states ${catkin_LIBRARIES})

add_executable(cam_test src/camera_test.cpp)
target_link_libraries(cam_test ${catkin_LIBRARIES} ${OpenCV_LIBRARIES})

add_executable(pick_and_placer src/pick_and_placer.cpp)
target_link_libraries(pick_and_placer ${catkin_LIBRARIES} ${OpenCV_LIBRARIES})

add_executable(wave_hand src/wave_hand.cpp)
target_link_libraries(wave_hand ${catkin_LIBRARIES} ${OpenCV_LIBRARIES})

add_executable(phone_pos_controller src/phone_pos_controller.cpp)
target_link_libraries(phone_pos_controller ${catkin_LIBRARIES} ${OpenCV_LIBRARIES})

add_executable(hit_pos_controller src/hit_pos_controller.cpp)
target_link_libraries(hit_pos_controller ${catkin_LIBRARIES} ${OpenCV_LIBRARIES})

add_executable(repeat_same_action src/repeat_same_action.cpp)
target_link_libraries(repeat_same_action ${catkin_LIBRARIES} ${OpenCV_LIBRARIES})

add_executable(repeat_same_position src/repeat_same_position.cpp)
target_link_libraries(repeat_same_position ${catkin_LIBRARIES} ${OpenCV_LIBRARIES})

## Add cmake target dependencies of the executable/library
## as an example, message headers may need to be generated before nodes
# add_dependencies(phantomx_rst_node phantomx_rst_generate_messages_cpp)

## Specify libraries to link a library or executable target against


#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS phantomx_rst phantomx_rst_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_phantomx_rst.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
